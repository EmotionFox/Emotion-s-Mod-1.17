package fr.emotion.emomod.dimension;

import java.util.Random;

import org.lwjgl.opengl.GL11;

import com.mojang.blaze3d.platform.GlStateManager;

import fr.emotion.emomod.MainRegistry;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GLAllocation;
import net.minecraft.client.renderer.RenderHelper;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.texture.TextureManager;
import net.minecraft.client.renderer.vertex.VertexBuffer;
import net.minecraft.client.renderer.vertex.VertexFormat;
import net.minecraft.client.renderer.vertex.VertexFormatElement;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.util.ResourceLocation;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.client.ForgeHooksClient;
import net.minecraftforge.client.IRenderHandler;

public class DreamSkyRenderer implements IRenderHandler
{
	protected ClientWorld theWorld;
	protected Minecraft mc;
	protected TextureManager renderEngine;

	protected int glSkyList = -1;
	protected int glSkyList2 = -1;
	protected int starGLCallList = -1;

	protected VertexFormat vertexBufferFormat;
	protected boolean vboEnabled;
	protected VertexBuffer starVBO;
	protected VertexBuffer skyVBO;
	protected VertexBuffer sky2VBO;

	protected static final ResourceLocation locationMoonPng = new ResourceLocation(MainRegistry.MOD_ID + ":textures/environment/moon_phases.png");
	protected static final ResourceLocation locationSunPng = new ResourceLocation(MainRegistry.MOD_ID + ":textures/environment/sun.png");

	public DreamSkyRenderer()
	{
		this.vertexBufferFormat = new VertexFormat();
		this.vertexBufferFormat.addElement(new VertexFormatElement(0, VertexFormatElement.Type.FLOAT, VertexFormatElement.Usage.POSITION, 3));

		this.setup();
	}

	protected void setup()
	{
		if (this.theWorld == null)
			return;

		this.generateSky();
		this.generateSky2();
		this.generateStars();
	}

	@Override
	public void render(int ticks, float partialTicks, ClientWorld world, Minecraft mc)
	{
		this.mc = mc;
		this.theWorld = world;
		this.renderEngine = mc.getTextureManager();
		int pass = ForgeHooksClient.getWorldRenderPass();

		this.setup();
		this.renderSky(pass, partialTicks);
	}

	protected void generateSky()
	{
		Tessellator tessellator = Tessellator.getInstance();
		BufferBuilder BufferBuilder = tessellator.getBuffer();

		if (this.skyVBO != null)
		{
			this.skyVBO.deleteGlBuffers();
		}

		if (this.glSkyList >= 0)
		{
			GLAllocation.deleteDisplayLists(this.glSkyList);
			this.glSkyList = -1;
		}

		if (this.vboEnabled)
		{
			this.skyVBO = new VertexBuffer(this.vertexBufferFormat);
			this.renderSkyInternal(BufferBuilder, 16.0F, false);
			BufferBuilder.finishDrawing();
			BufferBuilder.reset();
			this.skyVBO.bufferData(BufferBuilder.getByteBuffer());
		}
		else
		{
			this.glSkyList = GLAllocation.generateDisplayLists(1);
			GL11.glNewList(this.glSkyList, GL11.GL_COMPILE);
			this.renderSkyInternal(BufferBuilder, 16.0F, false);
			tessellator.draw();
			GL11.glEndList();
		}
	}

	protected void generateSky2()
	{
		Tessellator tessellator = Tessellator.getInstance();
		BufferBuilder BufferBuilder = tessellator.getBuffer();

		if (this.sky2VBO != null)
		{
			this.sky2VBO.deleteGlBuffers();
		}

		if (this.glSkyList2 >= 0)
		{
			GLAllocation.deleteDisplayLists(this.glSkyList2);
			this.glSkyList2 = -1;
		}

		if (this.vboEnabled)
		{
			this.sky2VBO = new VertexBuffer(this.vertexBufferFormat);
			this.renderSkyInternal(BufferBuilder, -16.0F, true);
			BufferBuilder.finishDrawing();
			BufferBuilder.reset();
			this.sky2VBO.bufferData(BufferBuilder.getByteBuffer());
		}
		else
		{
			this.glSkyList2 = GLAllocation.generateDisplayLists(1);
			GL11.glNewList(this.glSkyList2, GL11.GL_COMPILE);
			this.renderSkyInternal(BufferBuilder, -16.0F, true);
			tessellator.draw();
			GL11.glEndList();
		}
	}

	protected void generateStars()
	{
		Tessellator tessellator = Tessellator.getInstance();
		BufferBuilder BufferBuilder = tessellator.getBuffer();

		if (this.starVBO != null)
		{
			this.starVBO.deleteGlBuffers();
		}

		if (this.starGLCallList >= 0)
		{
			GLAllocation.deleteDisplayLists(this.starGLCallList);
			this.starGLCallList = -1;
		}

		if (this.vboEnabled)
		{
			this.starVBO = new VertexBuffer(this.vertexBufferFormat);
			this.renderStarsInternal(BufferBuilder);
			BufferBuilder.finishDrawing();
			BufferBuilder.reset();
			this.starVBO.bufferData(BufferBuilder.getByteBuffer());
		}
		else
		{
			this.starGLCallList = GLAllocation.generateDisplayLists(1);
			GlStateManager.pushMatrix();
			GL11.glNewList(this.starGLCallList, GL11.GL_COMPILE);
			this.renderStarsInternal(BufferBuilder);
			tessellator.draw();
			GL11.glEndList();
			GlStateManager.popMatrix();
		}
	}

	protected void renderSkyInternal(BufferBuilder BufferBuilderIn, float p_174968_2_, boolean p_174968_3_)
	{
		BufferBuilderIn.begin(7, BufferBuilderIn.getVertexFormat());

		for (int i = -384; i <= 384; i += 64)
		{
			for (int j = -384; j <= 384; j += 64)
			{
				float red = (float) i;
				float green = (float) (i + 64);

				if (p_174968_3_)
				{
					green = (float) i;
					red = (float) (i + 64);
				}

				BufferBuilderIn.pos((double) red, (double) p_174968_2_, (double) j);
				BufferBuilderIn.pos((double) green, (double) p_174968_2_, (double) j);
				BufferBuilderIn.pos((double) green, (double) p_174968_2_, (double) (j + 64));
				BufferBuilderIn.pos((double) red, (double) p_174968_2_, (double) (j + 64));
			}
		}
	}

	protected void renderStarsInternal(BufferBuilder BufferBuilderIn)
	{
		Random random = new Random(10842L);
		BufferBuilderIn.begin(7, BufferBuilderIn.getVertexFormat());
		;

		for (int i = 0; i < 1500; ++i)
		{
			double d0 = (double) (random.nextFloat() * 2.0F - 1.0F);
			double d1 = (double) (random.nextFloat() * 2.0F - 1.0F);
			double d2 = (double) (random.nextFloat() * 2.0F - 1.0F);
			double d3 = (double) (0.15F + random.nextFloat() * 0.1F);
			double d4 = d0 * d0 + d1 * d1 + d2 * d2;

			if (d4 < 1.0D && d4 > 0.01D)
			{
				d4 = 1.0D / Math.sqrt(d4);
				d0 *= d4;
				d1 *= d4;
				d2 *= d4;
				double d5 = d0 * 100.0D;
				double d6 = d1 * 100.0D;
				double d7 = d2 * 100.0D;
				double d8 = Math.atan2(d0, d2);
				double d9 = Math.sin(d8);
				double d10 = Math.cos(d8);
				double d11 = Math.atan2(Math.sqrt(d0 * d0 + d2 * d2), d1);
				double d12 = Math.sin(d11);
				double d13 = Math.cos(d11);
				double d14 = random.nextDouble() * Math.PI * 2.0D;
				double d15 = Math.sin(d14);
				double d16 = Math.cos(d14);

				for (int j = 0; j < 4; ++j)
				{
					double d17 = 0.0D;
					double d18 = (double) ((j & 2) - 1) * d3;
					double d19 = (double) ((j + 1 & 2) - 1) * d3;
					double d20 = 0.0D;
					double d21 = d18 * d16 - d19 * d15;
					double d22 = d19 * d16 + d18 * d15;
					double d23 = d21 * d12 + 0.0D * d13;
					double d24 = 0.0D * d12 - d21 * d13;
					double d25 = d24 * d9 - d22 * d10;
					double d26 = d22 * d9 + d24 * d10;
					BufferBuilderIn.pos(d5 + d25, d6 + d23, d7 + d26);
				}
			}
		}
	}

	protected void renderSkyBg(int pass, float partialTicks, Tessellator tessellator, BufferBuilder BufferBuilder, float red, float green, float blue)
	{
		GlStateManager.disableTexture();
		GlStateManager.color3f(red, green, blue);
		GlStateManager.depthMask(false);
		GlStateManager.enableFog();
		GlStateManager.color3f(red, green, blue);

		if (this.vboEnabled)
		{
			this.skyVBO.bindBuffer();
			GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
			GL11.glVertexPointer(3, GL11.GL_FLOAT, 12, 0L);
			this.skyVBO.drawArrays(7);
			VertexBuffer.unbindBuffer();
			GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
		}
		else
		{
			GlStateManager.callList(this.glSkyList);
		}

		GlStateManager.disableFog();
		GlStateManager.depthMask(true);
		GlStateManager.enableTexture();
	}

	protected void renderSkyGlow(int pass, float partialTicks, Tessellator tessellator, BufferBuilder BufferBuilder)
	{
		GlStateManager.disableAlphaTest();
		GlStateManager.depthMask(false);
		GlStateManager.enableBlend();
		GlStateManager.blendFuncSeparate(770, 771, 1, 0);
		RenderHelper.disableStandardItemLighting();
		float[] afloat = theWorld.getDimension().calcSunriseSunsetColors(theWorld.getCelestialAngle(partialTicks), partialTicks);
		float glowRed;
		float glowGreen;
		float glowBlue;

		if (afloat != null)
		{
			GlStateManager.disableTexture();
			GlStateManager.shadeModel(7425);
			GlStateManager.pushMatrix();
			GlStateManager.rotatef(90.0F, 1.0F, 0.0F, 0.0F);
			GlStateManager.rotatef(MathHelper.sin(theWorld.getCelestialAngleRadians(partialTicks)) < 0.0F ? 180.0F : 0.0F, 0.0F, 0.0F, 1.0F);
			GlStateManager.rotatef(90.0F, 0.0F, 0.0F, 1.0F);
			glowRed = afloat[0];
			glowGreen = afloat[1];
			glowBlue = afloat[2];

			if (pass != 2)
			{
				float bufferRed = (glowRed * 30.0F + glowGreen * 59.0F + glowBlue * 11.0F) / 100.0F;
				float bufferGreen = (glowRed * 30.0F + glowGreen * 70.0F) / 100.0F;
				float bufferBlue = (glowRed * 30.0F + glowBlue * 70.0F) / 100.0F;
				glowRed = bufferRed;
				glowGreen = bufferGreen;
				glowBlue = bufferBlue;
			}

			BufferBuilder.begin(6, BufferBuilder.getVertexFormat());
			;
			BufferBuilder.color(glowRed, glowGreen, glowBlue, afloat[3]);
			BufferBuilder.pos(0.0D, 100.0D, 0.0D);
			boolean flag = true;
			BufferBuilder.color(afloat[0], afloat[1], afloat[2], 0.0F);

			for (int j = 0; j <= 16; ++j)
			{
				float angleFactor = (float) j * (float) Math.PI * 2.0F / 16.0F;
				float sinFactor = MathHelper.sin(angleFactor);
				float cosFactor = MathHelper.cos(angleFactor);
				BufferBuilder.pos((double) (sinFactor * 120.0F), (double) (cosFactor * 120.0F), (double) (-cosFactor * 40.0F * afloat[3]));
			}

			tessellator.draw();
			GlStateManager.popMatrix();
			GlStateManager.shadeModel(7424);
			GlStateManager.enableTexture();
		}

		GlStateManager.disableBlend();
		GlStateManager.depthMask(true);
		GlStateManager.enableAlphaTest();
	}

	// protected void renderStellar(int pass, float partialTicks, Tessellator
	// tessellator, BufferBuilder BufferBuilder, float red, float green, float
	// blue)
	// {
	// GlStateManager.enableBlend();
	// GlStateManager.disableFog();
	// GlStateManager.blendFuncSeparate(770, 1, 1, 0);
	// GlStateManager.depthMask(false);
	// GlStateManager.pushMatrix();
	// float weatherEffect = 1.0F - theWorld.getRainStrength(partialTicks);
	// GlStateManager.color4f(1.0F, 1.0F, 1.0F, weatherEffect);
	// GlStateManager.translatef(0.0F, 0.0F, 0.0F);
	// GlStateManager.rotatef(-90.0F, 0.0F, 1.0F, 0.0F);
	// GlStateManager.rotatef(theWorld.getCelestialAngle(partialTicks) * 360.0F,
	// 1.0F, 0.0F, 0.0F);
	// float stellarDepth = 30.0F;
	// this.renderEngine.bindTexture(locationSunPng);
	// BufferBuilder.begin(7, BufferBuilder.getVertexFormat());
	// BufferBuilder.putPosition((double) (-stellarDepth), 100.0D, (double)
	// (-stellarDepth), 0.0D, 0.0D);
	// BufferBuilder.posWithUV((double) stellarDepth, 100.0D, (double)
	// (-stellarDepth), 1.0D, 0.0D);
	// BufferBuilder.posWithUV((double) stellarDepth, 100.0D, (double)
	// stellarDepth, 1.0D, 1.0D);
	// BufferBuilder.posWithUV((double) (-stellarDepth), 100.0D, (double)
	// stellarDepth, 0.0D, 1.0D);
	// tessellator.draw();
	// stellarDepth = 20.0F;
	// this.renderEngine.bindTexture(locationMoonPng);
	// int k = theWorld.getMoonPhase();
	// int l = k % 4;
	// int i1 = k / 4 % 2;
	// float red5 = (float) (l + 0) / 4.0F;
	// float red6 = (float) (i1 + 0) / 2.0F;
	// float red7 = (float) (l + 1) / 4.0F;
	// float red8 = (float) (i1 + 1) / 2.0F;
	// BufferBuilder.begin(7, BufferBuilder.getVertexFormat());
	// ;
	// BufferBuilder.putPosition(x, y, z);((double) (-stellarDepth), -100.0D,
	// (double) stellarDepth, (double) red7, (double) red8);
	// BufferBuilder.posWithUV((double) stellarDepth, -100.0D, (double)
	// stellarDepth, (double) red5, (double) red8);
	// BufferBuilder.posWithUV((double) stellarDepth, -100.0D, (double)
	// (-stellarDepth), (double) red5, (double) red6);
	// BufferBuilder.posWithUV((double) (-stellarDepth), -100.0D, (double)
	// (-stellarDepth), (double) red7, (double) red6);
	// tessellator.draw();
	// GlStateManager.disableTexture();
	// GlStateManager.disableAlphaTest();
	// float red9 = theWorld.getStarBrightness(partialTicks) * weatherEffect;
	// if (red9 > 0.0F)
	// {
	// GlStateManager.color4f(red9, red9, red9, red9);
	//
	// if (this.vboEnabled)
	// {
	// this.starVBO.bindBuffer();
	// GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
	// GL11.glVertexPointer(3, GL11.GL_FLOAT, 12, 0L);
	// this.starVBO.drawArrays(7);
	// VertexBuffer.unbindBuffer();
	// GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
	// }
	// else
	// {
	// GlStateManager.callList(this.starGLCallList);
	// }
	// }
	//
	// GlStateManager.color4f(1.0F, 1.0F, 1.0F, 1.0F);
	// GlStateManager.disableBlend();
	// GlStateManager.enableAlphaTest();
	// GlStateManager.enableFog();
	// GlStateManager.popMatrix();
	// GlStateManager.enableTexture();
	// GlStateManager.depthMask(true);
	// }

	protected void renderSkyOverlay(int pass, float partialTicks, Tessellator tessellator, BufferBuilder BufferBuilder, float red, float green, float blue)
	{
		GlStateManager.disableTexture();
		GlStateManager.depthMask(false);
		GlStateManager.color3f(0.0F, 0.0F, 0.0F);
		double d0 = mc.player.getEyePosition(partialTicks).y - theWorld.getHorizon();

		if (d0 < 0.0D)
		{
			GlStateManager.pushMatrix();
			GlStateManager.translatef(0.0F, 12.0F, 0.0F);

			if (this.vboEnabled)
			{
				this.sky2VBO.bindBuffer();
				GL11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
				GL11.glVertexPointer(3, GL11.GL_FLOAT, 12, 0L);
				this.sky2VBO.drawArrays(7);
				VertexBuffer.unbindBuffer();
				GL11.glDisableClientState(GL11.GL_VERTEX_ARRAY);
			}
			else
			{
				GlStateManager.callList(this.glSkyList2);
			}

			GlStateManager.popMatrix();
			float overlayDepth = -((float) (d0 + 80.0D));
			BufferBuilder.begin(7, BufferBuilder.getVertexFormat());
			;
			BufferBuilder.putColorRGBA(255, 255, 255, 0);
			BufferBuilder.pos(-1.0D, (double) overlayDepth, 1.0D);
			BufferBuilder.pos(1.0D, (double) overlayDepth, 1.0D);
			BufferBuilder.pos(1.0D, -1.0D, 1.0D);
			BufferBuilder.pos(-1.0D, -1.0D, 1.0D);
			BufferBuilder.pos(-1.0D, -1.0D, -1.0D);
			BufferBuilder.pos(1.0D, -1.0D, -1.0D);
			BufferBuilder.pos(1.0D, (double) overlayDepth, -1.0D);
			BufferBuilder.pos(-1.0D, (double) overlayDepth, -1.0D);
			BufferBuilder.pos(1.0D, -1.0D, -1.0D);
			BufferBuilder.pos(1.0D, -1.0D, 1.0D);
			BufferBuilder.pos(1.0D, (double) overlayDepth, 1.0D);
			BufferBuilder.pos(1.0D, (double) overlayDepth, -1.0D);
			BufferBuilder.pos(-1.0D, (double) overlayDepth, -1.0D);
			BufferBuilder.pos(-1.0D, (double) overlayDepth, 1.0D);
			BufferBuilder.pos(-1.0D, -1.0D, 1.0D);
			BufferBuilder.pos(-1.0D, -1.0D, -1.0D);
			BufferBuilder.pos(-1.0D, -1.0D, -1.0D);
			BufferBuilder.pos(-1.0D, -1.0D, 1.0D);
			BufferBuilder.pos(1.0D, -1.0D, 1.0D);
			BufferBuilder.pos(1.0D, -1.0D, -1.0D);
			tessellator.draw();
		}

		if (theWorld.getDimension().isSkyColored())
		{
			GlStateManager.color3f(red * 0.2F + 0.04F, green * 0.2F + 0.04F, blue * 0.6F + 0.1F);
		}
		else
		{
			GlStateManager.color3f(red, green, blue);
		}

		GlStateManager.pushMatrix();
		GlStateManager.translatef(0.0F, -((float) (d0 - 16.0D)), 0.0F);
		GlStateManager.callList(this.glSkyList2);
		GlStateManager.popMatrix();
		GlStateManager.enableTexture();
		GlStateManager.depthMask(true);
	}

	protected void renderSky(int pass, float partialTicks)
	{
		if (mc.world.getDimension().isSurfaceWorld())
		{
			Vec3d vec3 = theWorld.getSkyColor(mc.getRenderViewEntity().getPosition(), partialTicks);
			float red = (float) vec3.x;
			float green = (float) vec3.y;
			float blue = (float) vec3.z;

			if (pass != 2)
			{
				float bufferRed = (red * 30.0F + green * 59.0F + blue * 11.0F) / 100.0F;
				float bufferGreen = (red * 30.0F + green * 70.0F) / 100.0F;
				float bufferBlue = (red * 30.0F + blue * 70.0F) / 100.0F;
				red = bufferRed;
				green = bufferGreen;
				blue = bufferBlue;
			}

			Tessellator tessellator = Tessellator.getInstance();
			BufferBuilder BufferBuilder = tessellator.getBuffer();

			this.renderSkyBg(pass, partialTicks, tessellator, BufferBuilder, red, green, blue);
			this.renderSkyGlow(pass, partialTicks, tessellator, BufferBuilder);
			// this.renderStellar(pass, partialTicks, tessellator,
			// BufferBuilder, red, green, blue);
			this.renderSkyOverlay(pass, partialTicks, tessellator, BufferBuilder, red, green, blue);
		}
	}
}